/*global iqtest, map_options */
this.tests=this.tests||[];(function(){function a(c,b,e){var d=e.split(","),f=$();
c.each(function(){for(var g=0;g<d.length;g++){if($(this).is("["+b+"='"+d[g]+"']")){f=f.add(this);
g=d.length;}}});return f;}this.tests.push(iqtest.create("basic","manipulation tests - migrated from old test suite (not organized)").add("Migrated tests",function(b,i){var g=this,d=function(j){return g.promises(j);
},h=$.mapster.utils;var c=$("#test_elements *").length;var f=$("img").mapster();f.mapster("unbind");
var e=f.mapster("test","typeof m === 'undefined'");if(!e){f=$("img").mapster(map_options);
b.equals(1,f.mapster("test","typeof m !== 'undefined' && m.map_cache && m.map_cache.length"),"Only imagemap bound images were obtained on generic create");
f=$("img,div").mapster({mapKey:"state"});b.equals(1,f.mapster("test","typeof m !== 'undefined' && m.map_cache && m.map_cache.length"),"Only imagemap bound images were obtained on generic create with other elements");
}f=$("#usa_image").mapster($.extend(map_options,{onConfigured:d("configured").resolve}));
d("configured").then(function(){var m=h.updateProps({},$.mapster.defaults,map_options);
var o=f.mapster("get_options");b.equals(o,m,"Options retrieved match initial options");
var n={isSelectable:false,areas:[{key:"MT",isDeselectable:false}]};f.mapster("set_options",n);
o=f.mapster("get_options");var l=$.extend({},m);l.isSelectable=false;b.propertyValueEquals(o,l,"Options retrieved match updated value");
b.equals(o.areas.length,6,"Area option was added");o=f.mapster("set_options",{isSelectable:true,areas:[{key:"MT",isDeselectable:true}]});
b.equals(!!f.mapster,true,"Plugin returns jQuery object");b.equals(f,$("#usa_image"),"Plugin returns jquery same object as invocation");
var p=f.mapster("get");b.collectionEquals(p,"AK,TX","Initially selected items returned with 'get'");
p=f.mapster("get","TX");b.equals(p,true,"Initially selected single item returned true with 'get'");
p=f.mapster("get","ME");b.equals(p,false,"Initially deselected single item returned false with 'get'");
a($("area"),"state","AK,HI,LA").mapster("set",true);var j=f.mapster("get");b.collectionEquals(j,"HI,AK,LA,TX","Set using area works");
f.mapster("set",false,"LA,TX");b.collectionEquals("HI,AK",f.mapster("get"),"unset using keys works");
f.mapster("set",true,"ME,OH,TX");b.collectionEquals("HI,AK,ME,OH,TX",f.mapster("get"),"set using keys works");
var k=$("area[state=AK]").first();k=k.add($("area[state=MT]").first());k.mapster("set");
b.collectionEquals("HI,ME,OH,TX,MT",f.mapster("get"),"toggling keys works");$('area[state="AZ"]').first().click();
p=f.mapster("get","AZ");b.equals(true,p,"Click-selected area returned 'get'");b.collectionEquals("HI,ME,OH,TX,MT,AZ",f.mapster("get"),"Complete list returned with 'get'");
$('area[state="OR"]').first().click();p=f.mapster("get","OR");b.equals(p,false,"Cannot select 'staticState=false' area with click");
p=f.mapster("get","WA");b.equals(p,false,"staticState=true area is considered not selected");
o=f.mapster("get_options","WA");b.equals(o.staticState,true,"get effective options returned correct static state for WA");
o=f.mapster("get_options","OR");b.equals(o.staticState,false,"get effective options returned correct static state for OR");
$('area[state="WA"]').first().click();p=f.mapster("get","WA");b.equals(p,false,"Cannot change selection state of 'staticState=true' area with click");
f.mapster("set",true,"OR");p=f.mapster("get","OR");b.equals(p,true,"Can select 'staticState=false' area with 'set'");
f.mapster("set",false,"WA");b.equals(f.mapster("get","WA"),false,"Can deselect staticState=true' area with 'set'");
n=f.mapster("get_options");n.singleSelect=true;f.mapster("rebind",n);b.collectionEquals(f.mapster("get"),"TX,AK","Rebind with singleSelect reverted to original state");
f.mapster("set",true,"MI");b.equals(f.mapster("get"),"MI","Single select worked.");
f.mapster("set_options",{isDeselectable:false});$('area[state="MI"]').first().click();
b.equals(f.mapster("get","MI"),true,"Cannot deselect single selected item with isDeselectable=false");
$('area[state="UT"]').first().click();b.equals(f.mapster("get"),"UT","New single state selected");
f.mapster("set_options",{singleSelect:false,isDeselectable:true,areas:[{key:"ME",isDeselectable:false}]});
$('area[state="UT"]').first().click();b.equals(f.mapster("get","UT"),false,"Was able to deselect item after removing singleSelect");
f.mapster("set",true,"CA,HI,ME");$('area[state="ME"]').first().click();b.equals(f.mapster("get","ME"),true,"Could not deselect one item marked as !isDeselectable");
$('area[state="CA"]').first().click();b.equals(f.mapster("get","CA"),false,"Could deselect other items ");
b.equals(f.mapster("highlight"),null,"nothing is highlighted");$('area[state="CA"]').first().mapster("highlight");
b.equals(f.mapster("highlight"),"CA","highlighted manually");f.mapster("highlight","LA");
b.equals(f.mapster("highlight"),"LA","highlighted manually using other technique");
f.mapster("highlight",false);b.equals(f.mapster("highlight"),null,"everything unhighlighted");
f.mapster("unbind");b.equals($("canvas").length,0,"No canvases remain after an unbind.");
b.equals($("#test_elements *").length,c,"# elements in DOM is the same.");});}));
}());